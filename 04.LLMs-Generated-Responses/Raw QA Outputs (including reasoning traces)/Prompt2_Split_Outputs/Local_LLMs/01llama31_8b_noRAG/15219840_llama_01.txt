总时间（秒）：14.30
问答时间（秒）：14.18

To address the problem of extracting mutation information from medical literature, I will use a combination of natural language processing (NLP) and data mining techniques to identify relevant terms and extract specific details.

Here's an approach to solve this problem:

1. **Text Preprocessing**: Clean the input text by removing any unnecessary characters, converting all text to lowercase, and tokenizing it into individual words or phrases.
2. **Mutation-related Term Identification**: Use a dictionary or a machine learning model trained on biomedical literature to identify mutation-related terms such as "mutation", "variant", "gene", "cDNA change", etc. Identify these terms in the preprocessed text.
3. **Specific Mutation Information Extraction**:
	* If the term "gene" is found, extract the gene name mentioned along with it (e.g., "TP53").
	* For mutation-related terms like "variant", "mutation", or "cDNA change", identify specific details such as cDNA changes, protein changes, and mutation descriptions.
4. **Format Extraction Information**: Format the extracted information into the specified JSON format.

Here is a Python code snippet that uses these steps to extract mutation information from medical literature:

```python
import re
from collections import defaultdict

# Define a dictionary for biomedical terms
biomedical_terms = {
    "gene": ["gene", "genes"],
    "variant": ["variant", "variants"],
    "mutation": ["mutation", "mutations"],
    "cDNA change": ["cdna", "change"]
}

def extract_mutation_info(text):
    # Preprocess the text
    text = re.sub(r'[^\w\s]', '', text).lower().split()

    # Identify mutation-related terms
    mutation_terms = defaultdict(list)
    for term, values in biomedical_terms.items():
        for value in values:
            for i in range(len(text)):
                if value == text[i]:
                    mutation_terms[term].append(i)

    # Extract specific mutation information
    extracted_info = []
    for term, indices in mutation_terms.items():
        if term == "gene":
            gene_name = get_gene_name(indices, text)
            extracted_info.append({"Gene": gene_name})
        elif term in ["variant", "mutation"]:
            variants = extract_variants(indices, text)
            extracted_info.append({"variants": variants})

    # Format the extracted information into JSON
    return format_json(extracted_info)

def get_gene_name(indices, text):
    start_index = indices[0]
    end_index = max([i for i in indices if i > start_index])
    gene_name = ' '.join(text[start_index:end_index + 1]).strip()
    return gene_name

def extract_variants(indices, text):
    variants = []
    for index in indices:
        cDNA_change = get_cDNA_change(index, text)
        protein_change = get_protein_change(cDNA_change)
        description_in_context = get_description_in_context(cDNA_change)
        variants.append({"cDNA Change": cDNA_change, "Protein Change": protein_change, "Description in input context": description_in_context})
    return variants

def get_cDNA_change(index, text):
    # Extract the specific cDNA change mentioned
    start_index = index - 1
    end_index = index + 2
    cDNA_change = ' '.join(text[start_index:end_index]).strip()
    ref, alt = re.match(r'([a-zA-Z]+)([a-zA-Z]+) ([0-9]+):c\.([a-zA-Z]+)\>([a-zA-Z]+)', cDNA_change).groups()[:4]
    return {"transcript": "N.D.", "ref": ref, "alt": alt, "position": int(re.match(r'([0-9]+)$', cDNA_change).group(1))}

def get_protein_change(cDNA_change):
    # Extract the specific protein change mentioned
    return {"ref": cDNA_change["ref"], "alt": cDNA_change["alt"], "position": cDNA_change["position"]}

def get_description_in_context(cDNA_change):
    # Extract the description of the mutation in context
    return cDNA_change["transcript"] + cDNA_change["ref"] + ">" + cDNA_change["alt"]

def format_json(extracted_info):
    if extracted_info:
        json_output = {"mutation_info": extracted_info[0]}
        for key, value in extracted_info[1].items():
            if isinstance(value, list):
                json_output[key] = [{"key": k, "value": v} for k, v in value]
        return json_output
    else:
        return {"mutation_info": "N.D."}

# Test the function
text = "In a study of lung cancer patients, it was found that the c.248G>A (p.G83D) mutation in the TP53 gene is associated with tumor progression."
print(extract_mutation_info(text))
```

The above Python code snippet uses regular expressions and dictionary-based matching to identify specific terms related to mutations and then extracts relevant details such as gene names, variants, protein changes, and descriptions. The extracted information is formatted into the specified JSON format.

This approach enables us to accurately and efficiently extract mutation-related information from medical literature while minimizing human intervention.