总时间（秒）：3546.75
问答时间（秒）：58.01

```python
import re

def extract_mutations_from_medical_text(text):
    # Define regular expression patterns for mutation information
    cDNA_change_pattern = r"c\.(\d+)([ACGT])>([ACGT])"
    protein_change_pattern = r"p\.(\w+)(\d+)(\w+)"
    mutation_description_pattern = r"\(p\.(\w+)(\d+)(\w+)\)"
    
    # Initialize output JSON object
    output = {
        "Gene": "N.D.",
        "variants": []
    }
    
    # Search for gene name (case-insensitive match)
    gene_match = re.search(r"gene (\w+)", text, flags=re.IGNORECASE)
    if gene_match:
        output["Gene"] = gene_match.group(1)
    
    # Find all matches for cDNA changes
    cDNA_changes = re.findall(cDNA_change_pattern, text)
    if len(cDNA_changes) > 0:
        for cDNA_change in cDNA_changes:
            variant = {
                "cDNA Change": {
                    "transcript": "N.D.",
                    "ref": cDNA_change[1],
                    "alt": cDNA_change[2],
                    "position": int(cDNA_change[0])
                },
                "Protein Change": {
                    "ref": "N.D.",
                    "alt": "N.D.",
                    "position": -1
                },
                "Description in input context": f"c.{cDNA_change[0]}{cDNA_change[1]}>{cDNA_change[2]}"
            }
            output["variants"].append(variant)
            
    # Find all matches for protein changes
    protein_changes = re.findall(protein_change_pattern, text)
    if len(protein_changes) > 0:
        for protein_change in protein_changes:
            variant = {
                "cDNA Change": {
                    "transcript": "N.D.",
                    "ref": "N.D.",
                    "alt": "N.D.",
                    "position": -1
                },
                "Protein Change": {
                    "ref": protein_change[0],
                    "alt": protein_change[2],
                    "position": int(protein_change[1])
                },
                "Description in input context": f"p.{protein_change[0]}{protein_change[1]}{protein_change[2]}"
            }
            output["variants"].append(variant)
            
    # Find all matches for mutation descriptions
    mutation_descriptions = re.findall(mutation_description_pattern, text)
    if len(mutation_descriptions) > 0:
        for mutation_description in mutation_descriptions:
            variant = {
                "cDNA Change": {
                    "transcript": "N.D.",
                    "ref": "N.D.",
                    "alt": "N.D.",
                    "position": -1
                },
                "Protein Change": {
                    "ref": mutation_description[0],
                    "alt": mutation_description[2],
                    "position": int(mutation_description[1])
                },
                "Description in input context": f"(p.{mutation_description[0]}{mutation_description[1]}{mutation_description[2]})"
            }
            output["variants"].append(variant)
        
    return output
    
# Example usage
example_text = """In a study of lung cancer patients, 
it was found that the c.248G>A (p.G83D) mutation in the TP53 gene 
is associated with tumor progression."""
print(extract_mutations_from_medical_text(example_text))
```
Note: This implementation uses regular expressions to search for specific patterns