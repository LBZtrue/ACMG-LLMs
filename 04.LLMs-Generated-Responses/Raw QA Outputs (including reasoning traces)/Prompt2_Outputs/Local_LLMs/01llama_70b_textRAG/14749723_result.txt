总时间（秒）：1236.89
问答时间（秒）：93.24

```python
import re
from json import dumps
from bs4 import BeautifulSoup
from requests import get

def extract_and_standardize(input_text):
    """Extracts and standardizes information from the input text.

    Args:
        input_text (str): The input text containing the relevant information.

    Returns:
        dict: The extracted and standardized information in JSON format.

    Raises:
        Exception: If there was an error during extraction or standardization.
    """
    try:
        # Extract variants information
        variants_include = []
        for match in re.finditer(r'([A-Z]+)(?:\s+)?([a-z]+)?(\d+)(?:\s+)?([a-z]+)?(\d+)', input_text):
            gene, mutation_type, ref_position, alt_position, alt_nucleotide = match.groups()
            variant = {
                'Gene': gene.upper(),
                'variants': [{
                    'HGVS': 'NCBI:{}'.format(str(mutation_type).lower() + str(ref_position) + '>' + str(alt_nucleotide).upper()),
                    'cDNA Change': {'transcript': 'NCBI:{}'.format(str(mutation_type).lower() + str(ref_position) + '>' + str(alt_nucleotide).upper())},
                    'Protein Change': {'ref': str(ref_position), 'alt': str(alt_position), 'position': str(alt_nucleotide)},
                    'Description in input context': '{} {}{}{}{}'.format(gene.upper(), str(mutation_type).lower(), str(ref_position), '>' if len(alt_nucleotide) == 1 else '', str(alt_nucleotide).upper())
                }]
            }
            variants_include.append(variant)

        # Standardize HGVS nomenclature via API
        standardized_variants = []
        for variant in variants_include:
            for mutation in variant['variants']:
                mutation['HGVS'] = 'NCBI:' + str(mutation['cDNA Change']['transcript']).replace(':', '.')
                standardized_variants.append(mutation)

        # Identify the disease studied in the literature and retrieve the corresponding terms from the MONDO database
        described_disease = re.search(r'(.*)(?:\s+)([A-Z][a-z]+)[\s\,]+', input_text).group(2)
        mondo_term = 'MONDO:' + str(input_text).split()[-1]

        # List all experimental methods mentioned in the literature and extract detailed information about each method
        experiment_methods = []
        for method in re.findall(r'([A-Za-z ]+)(?:\s+)?(assay|test)', input_text):
            material_used = re.search(r'(?:Material Used: )(.*)', input_text).group(1)
            readout_type = re.search(r'(?:Readout Type: )(.*)(?:\s+)', input_text).group(1)
            readout_description = re.findall(r'([A-Z]+)(?:\s+)?([a-z]+)?(\d+)(?:\s+)?([a-z]+)?(\d+)', input_text)
            biological_replicates = re.search(r'(?:Biological Replicates: )(Yes|No)', input_text).group(1)
            technical_replicates = re.search(r'(?:Technical Replicates: )(Yes|No)', input_text).group(1)
            basic_positive_control = re.search(r'(?:Basic Positive Control: )(Yes|No)', input_text).group(1)
            basic_negative_control = re.search(r'(?:Basic Negative Control: )(Yes|No)', input_text).group(1)
            validation_controls_plp = re.search(r'(?:Validation Controls P/LP: )(Yes|No)', input_text).group(1)
            validation_controls_blb = re.search(r'(?:Validation Controls B/LB: )(Yes|No)', input_text).group(1)
            statistical_analysis_method = re.search(r'(?:Statistical Analysis Method: )(.*)', input_text).group(1)
            threshold_for_normal_readout = re.search(r'(?:Threshold for Normal Readout: )(.*)', input_text).group(1)
            threshold_for_abnormal_readout = re.search(r'(?:Threshold for Abnormal Readout: )(.*)', input_text).group(1)
            approved_assay = re.search(r'(?:Approved Assay: )(Yes|No)', input_text).group(1)

            experiment_method = {'Assay Method': method[0], 'Material used': {'Material Source': material_used}, 'Readout type': readout_type, 'Readout description': readout_description, 'Biological replicates': biological_replicates, 'Technical replicates': technical_replicates, 'Basic positive control': basic_positive_control, 'Basic negative control': basic_negative_control, 'Validation controls P/LP': validation_controls_plp, 'Validation controls B/LB': validation_controls_blb, 'Statistical analysis method': statistical_analysis_method, 'Threshold for normal readout': threshold_for_normal_readout, 'Threshold for abnormal readout': threshold_for_abnormal_readout, 'Approved assay': approved_assay}
            experiment_methods.append(experiment_method)

        output = {'Variants Include': variants_include, 'Described Disease': {'Described Disease': described_disease, 'MONDO': mondo_term}, 'Experiment Method': experiment_methods}
        return output

    except Exception as error:
        raise Exception('Error during extraction or standardization: {}'.format(error))

# Example usage
input_text = """
We identified a novel mutation in the BCL6 gene that leads to a premature stop codon at position 194 (c.194C>T). This mutation was found to be associated with