总时间（秒）：15592.22
问答时间（秒）：52.08

```py
import json

# Define the function to extract protein change information
def extract_protein_change(text):
    ref = ""
    alt = ""
    position = ""
    for word in text.split():
        if word.isalpha():
            if not ref:
                ref = word
            elif not alt:
                alt = word
        elif word.isdigit():
            position = word
    return {"ref": ref, "alt": alt, "position": position}


# Define the function to extract gene information
def extract_gene(text):
    genes = ["EGFR", "CFTR"]
    for gene in genes:
        if gene in text:
            return gene
    return None


# Define the function to extract variant string ID
def extract_variant_string_id(gene, protein_change):
    return f"{gene} {protein_change['ref']}{protein_change['position']}{protein_change['alt']}"


# Define the function to extract functional evidence aim
def extract_functional_evidence_aim(text):
    if "pathogenic" in text.lower():
        return "Pathogenic"
    elif "benign" in text.lower():
        return "Benign"
    else:
        return None


# Define the function to extract assessment steps
def extract_assessment_steps(text):
    steps = []
    step_names = [
        "Step 1: Define the disease mechanism.",
        "Step 2: Evaluate applicability of general classes of assay used in the field.",
        "Step 3: Evaluate validity of specific instances of assays.",
        "- Sub-step 3a: Basic Controls and Replicates.",
        "- Sub-step 3b: Accepted/Validated Assay (if basic controls/replicates were insufficient in 3a).",
        "- Sub-step 3c: Variant Controls (if basic controls/replicates were sufficient in 3a).",
        "Step 4: Apply evidence to individual variant interpretation.",
        "- Sub-step 4a: Statistical Analyses.",
        "- Sub-step 4b: No OddsPath Calculation (if statistical analyses were insufficient).",
        "- Sub-step 4c: Correlate OddsPath (if statistical analyses were sufficient)."
    ]
    for step_name in step_names:
        if step_name in text:
            judgment = "Yes" if step_name in text else "No"
            reasoning = "Explanation based on extracted info and flowchart logic."
            next_step_or_outcome = "Proceed to next step" if step_name != step_names[-1] else "Final outcome"
            steps.append({"step_name": step_name, "judgment": judgment, "reasoning": reasoning, "next_step_or_outcome": next_step_or_outcome})
    return steps


# Define the function to extract final evidence strength
def extract_final_evidence_strength(steps):
    evidence_strengths = {
        "PS3_very_strong": ["PS3_very_strong", "PS3_moderate", "PS3_supporting"],
        "BS3_very_strong": ["BS3_very_strong", "BS3_moderate", "BS3_supporting"],
        "N/A": []