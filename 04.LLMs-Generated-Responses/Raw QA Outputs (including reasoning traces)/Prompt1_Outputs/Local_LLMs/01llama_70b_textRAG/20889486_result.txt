总时间（秒）：20834.63
问答时间（秒）：78.23

```py
import json
import re
from collections import defaultdict
from typing import Dict, List, Tuple

# Define constants
GENE_SYMBOL_REGEX = r"^([A-Za-z0-9]+)$"
PROTEIN_CHANGE_REGEX = r"^(.)\d+(.)$"
VARIANT_STRING_ID_REGEX = r"^([A-Za-z0-9]+) ([A-Za-z0-9]+)\d+([A-Za-z0-9]+)$"
STEP_1_QUESTION = "Does the paper clearly define the disease mechanism relevant to the functional assay being described for this variant?"
STEP_2_QUESTION = "Does the *general class* of assay used for this variant effectively model or reflect the disease pathogenesis/mechanism defined in Step 1?"
STEP_3_QUESTION = "Were basic controls included for this assay?"
STEP_4_QUESTION = "Are the statistical analyses in the paper sufficient to estimate or calculate OddsPath for the functional data for this variant?"
STEP_5_QUESTION = "How many total benign/pathogenic variant controls were used across the entire study (as applicable to this variant's assay)?"
STEP_6_QUESTION = "Extract the OddsPath value calculated in the paper for this variant."

# Define function to extract gene symbol from text
def extract_gene_symbol(text: str) -> str:
    matches = re.findall(GENE_SYMBOL_REGEX, text)
    if len(matches) > 0:
        return matches[0]
    else:
        raise ValueError("No gene symbol found.")

# Define function to extract protein change information from text
def extract_protein_change(text: str) -> Tuple[str, str, int]:
    matches = re.findall(PROTEIN_CHANGE_REGEX, text)
    if len(matches) > 0:
        ref, alt, pos_str = matches[0]
        pos = int(pos_str)
        return ref, alt, pos
    else:
        raise ValueError("No protein change information found.")

# Define function to extract variant string ID from text
def extract_variant_string_id(text: str) -> str:
    matches = re.findall(VARIANT_STRING_ID_REGEX, text)
    if len(matches) > 0:
        gene, ref, alt = matches[0]
        return f"{gene} {ref}{alt}"
    else:
        raise ValueError("No variant string ID found.")

# Define function to assess functional evidence for a specific variant
def assess_variant(text: str, variant: str) -> Dict:
    # Extract details for this variant
    gene = extract_gene_symbol(variant)
    protein_change = extract_protein_change(variant)
    variant_string_id = extract_variant_string_id(variant)
    
    # Determine functional evidence aim based on context of paper (e.g., "Pathogenic", "Benign")
    functional_evidence_aim = "Pathogenic"  # Replace with actual logic
    
    # Initialize assessment steps list
    assessment_steps = []
    
    # Add Step 1: Define the disease mechanism
    step_1_result = "Yes"  # Replace with actual logic
    step_1_details = "Quote or concise summary of the relevant text from the paper."  # Replace with actual logic
    step_1_reasoning = "Explanation based on extracted info and flowchart logic."  # Replace with actual logic
    step_1_outcome = "Proceed to Step 2" if step_1_result == "Yes" else "Do not use PS3/BS3"
    assessment_steps.append({
        "step_name": "Step 1: Define the disease mechanism",
        "extracted_paper_info": step_1_details,
        "judgment": step_1_result,
        "reasoning": step_1_reasoning,
        "next_step_or_outcome": step_1_outcome
    })
    
    # Add Step 2: Evaluate applicability of general classes of assay used in the field
    if step_1_outcome != "Proceed to Step 2":
        pass  # Skip Step 2 if Do not use PS3/BS3 from previous step
    else:
        step_2_result = "Yes"  # Replace with actual logic
        step_2_details = "Quote or concise summary of the relevant text from the paper."  # Replace with actual logic
        step_2_reasoning = "Explanation based on extracted info and flowchart logic."  # Replace with actual logic
        step_2_outcome = "Proceed to Step 3" if step_2_result == "Yes" else "Do not use PS3/BS3"
        assessment_steps.append({
            "step_name": "Step 2: Evaluate applicability of general classes of assay used in the field",
            "extracted_paper_info": step_2_details,
            "judgment": step_2_result,
            "reasoning":