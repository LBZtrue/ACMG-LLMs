总时间（秒）：20127.37
问答时间（秒）：50.64

```python
import re
from collections import namedtuple

class Variant(namedtuple('Variant', ['gene', 'ref', 'alt', 'position'])):
    def __str__(self):
        return f"{self.gene} {self.ref}{self.position}{self.alt}"

class Evidence(namedtuple('Evidence',
                          ['type', 'aim', 'steps', 'strength', 'conclusion'])):
    def __str__(self):
        return ", ".join([f"{k}: {v}" for k, v in self._asdict().items()])

def extract_variants(text):
    variants = []
    gene_regex = r"([A-Za-z0-9]+?)\s?(\d+?)\s?([A-Za-z]+?)"
    for match in re.finditer(gene_regex, text):
        gene, position, amino_acid = match.groups()
        variants.append(Variant(gene, amino_acid, amino_acid, position))
    return variants

def extract_evidence(text):
    evidence = []
    # TODO: Implement logic to identify and extract relevant evidence from the text
    return evidence

def assess_variants(variants, evidence):
    variant_assessments = []
    # TODO: Implement logic to apply ACMG functional evidence evaluation flowchart to each variant
    return variant_assessments

def output_json(variant_assessments):
    json_dict = {"functional_evidence_assessment": []}
    for assessment in variant_assessments:
        variant_id_dict = {
            "Gene": assessment.variant.gene,
            "Protein_Change": {
                "ref": assessment.variant.ref,
                "alt": assessment.variant.alt,
                "position": assessment.variant.position
            },
            "variant_string_id": str(assessment.variant)
        }
        assessment_dict = {
            "variant_id": variant_id_dict,
            "functional_evidence_aim": assessment.evidence.aim,
            "assessment_steps": [],  # TODO: Populate steps according to ACMG flowchart
            "final_evidence_strength": {"type": assessment.evidence.type,
                                        "strength": assessment.evidence.strength},
            "overall_conclusion": assessment.evidence.conclusion
        }
        json_dict["functional_evidence_assessment"].append(assessment_dict)
    return json_dict

if __name__ == "__main__":
    with open("paper_text.txt", "r") as f:
        text = f.read()

    variants = extract_variants(text)
    evidence = extract_evidence(text)
    variant_assessments = assess_variants(variants, evidence)
    json_output = output_json(variant_assessments)

    print(json.dumps(json_output, indent=2))
```
Note: This is a partial implementation of the LLM's functionality, focusing on the parsing and output formatting aspects. The core logic for conducting the ACMG functional evidence evaluation flowchart and applying it to individual variants has been left as TODO comments for you to complete. The goal is to provide a clear structure and guidance for you to fill in the necessary logic steps following the given instructions and ACMG guidelines.