总时间（秒）：4197.57
问答时间（秒）：92.47

```python
import re
from collections import defaultdict

def parse_protein_change(text):
    matches = re.findall(r"(\w+)[\d]+(\w+)", text)
    if len(matches) == 1:
        ref, alt = matches[0]
        position = int(re.findall(r"\d+", text)[0])
        return {"ref": ref, "alt": alt, "position": position}
    else:
        raise ValueError(f"Could not parse protein change from text: {text}")

def parse_variant_id(text):
    gene_match = re.search(r"(\w+) *(?:\[(\w+)\])?", text)
    if gene_match:
        gene, protein_change = gene_match.groups()
        protein_change = parse_protein_change(protein_change) if protein_change else None
        return {"Gene": gene, "Protein_Change": protein_change}
    else:
        raise ValueError(f"Could not parse variant ID from text: {text}")

def extract_info_from_text(text, keyword):
    info = []
    for line in text.split("\n"):
        if keyword.lower() in line.lower():
            info.append(line)
    return "\n".join(info)

def apply_acmg_flowchart(variant_id, aim, extracted_info):
    # Define the disease mechanism
    step1 = {"step_name": "Step 1: Define the disease mechanism", "extracted_paper_info": extract_info_from_text(extracted_info, "disease mechanism"), "judgment": "Yes" if "disease mechanism" in extracted_info else "No", "reasoning": "Explicit statements or strong inferences about the disease's molecular basis and how the gene/protein functions within it."}
    
    # Evaluate applicability of general classes of assay
    assay_type = re.search(r"(?:enzyme activity assay|protein interaction assay|gene expression assay|cell phenotype rescue assay)", extracted_info)
    step2 = {"step_name": "Step 2: Evaluate applicability of general classes of assay used in the field.", "extracted_paper_info": extract_info_from_text(extracted_info, "general class of assay"), "judgment": "Yes" if assay_type else "No", "reasoning": "The assay effectively models or reflects the disease pathogenesis/mechanism defined in Step 1.", "next_step_or_outcome": "Proceed to Step 3" if assay_type else "Do not use PS3/BS3"}

    # Evaluate validity of specific instances of assays
    substeps = []
    basic_control_matches = re.findall(r"(normal|negative|wild type|abnormal|positive|null)", extracted_info, flags=re.I)
    replicate_match = re.search(r"(?:multiple|independent) experiments", extracted_info)
    if len(basic_control_matches) >= 2 and replicate_match:
        substep3a = {"step_name": "Sub-step 3a: Basic Controls and Replicates", "extracted_paper_info": extract_info_from_text(extracted_info, "basic controls and replicates"), "judgment": "Yes", "reasoning": "Both 'Normal/Negative/Wild type' and 'Abnormal/Positive/Null' controls were included, and multiple replicates were used for the experiments.", "next_step_or_outcome": "Proceed to Sub-step 3c"}
        substeps.append(substep3a)
        
        substep3c = {"step_name": "Sub-step 3c: Variant Controls", "extracted_paper_info": extract_info_from_text(extracted_info, "variant controls"), "judgment": "Yes" if "known pathogenic" in extracted_info or "known benign" in extracted_info or re.search(r"\bP\/LP\b|\bB\/LB\b", extracted_info, flags=re.I) else "No", "reasoning": "Known pathogenic variants, known benign variants, or variants that reach P/LP or B/LB criteria without reliance on PS3/BS3 evidence were used.", "next_step_or_outcome": "Proceed to Step 4"}
        substeps.append(substep3c)
    elif len(basic_control_matches) < 2 or not replicate_match:
        substep3a = {"step_name": "Sub-step 3a: Basic Controls and Replicates", "extracted_paper_info": extract_info_from_text(extracted_info, "basic controls and replicates"), "judgment": "No", "reasoning": "Either 'Normal/Negative/Wild type' and 'Abnormal/Positive/Null' controls were not included, or multiple replicates were not used for the experiments.", "next_step_or_outcome": "Proceed to Sub-step 3b"}
        substeps.append(substep3a)
        
        substep3b = {"step_name": "Sub-step 3b: Accepted/Validated Assay", "extracted_paper_info": extract_info_from_text(extracted_info, "accepted|validated|commercial kit"), "judgment": "Yes" if "broadly accepted historically" in extracted_info or "previously validated" in extracted_info or "commercial kit" in extracted_info else "No", "reasoning": "The specific instance of the assay has been broadly accepted historically, previously validated in other studies, or provided as a commercial kit with defined performance metrics.", "next_step_or_outcome": "Max PS3_supporting / Max BS3_supporting" if "broadly accepted historically" in extracted_info or "previously validated" in extracted_info or "commercial kit" in extracted_info else "Do not use PS3/BS3"}
        substeps.append(substep3b)
        
    # Apply evidence to individual variant interpretation
    substep4